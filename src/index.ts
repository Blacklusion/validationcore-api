import { createConnection } from "typeorm";
import * as config from "config";
import * as api from "./api";
import * as cache from "./cache";
import { logger } from "./validationcore-database-scheme/common";
import { getChainsConfigItem, readConfig } from "./validationcore-database-scheme/readConfig";

export const CHAIN_ID = process.env.CHAIN_ID || null;
/**
 * Responsible for API & Cache startup. Validates the config and exposes the API
 */
export function main(): void {
  // Text generated by https://patorjk.com/software/taag/#p=display&f=Slant&t=Validationcore%20Api
  console.log(
    " _    __      ___     __      __  _                                     ___          _ \n" +
      "| |  / /___ _/ (_)___/ /___ _/ /_(_)___  ____  _________  ________     /   |  ____  (_)\n" +
      "| | / / __ `/ / / __  / __ `/ __/ / __ \\/ __ \\/ ___/ __ \\/ ___/ _ \\   / /| | / __ \\/ / \n" +
      "| |/ / /_/ / / / /_/ / /_/ / /_/ / /_/ / / / / /__/ /_/ / /  /  __/  / ___ |/ /_/ / /  \n" +
      "|___/\\__,_/_/_/\\__,_/\\__,_/\\__/_/\\____/_/ /_/\\___/\\____/_/   \\___/  /_/  |_/ .___/_/   \n" +
      "                                                                          /_/          "
  );
  console.log("    by Blacklusion - 2021\n\n");

  logger.info("Starting up Validationcore api...");

  // Read Config and abort if config is not set correctly
  logger.info("Reading Config...");

  if (!readConfig()) {
    logger.fatal("Aborting Startup...");
    return;
  }

  if (!CHAIN_ID) {
    logger.fatal("ChainID was not supplied as environmental variable...");
    logger.fatal("Aborting Startup...");
    return;
  }

  // Create connection to database
  createConnection({
    type: "postgres",
    host: config.get("database.postgres_host"),
    port: config.get("database.postgres_port"),
    username: config.get("database.postgres_user"),
    password: config.get("database.postgres_password"),
    database: getChainsConfigItem(CHAIN_ID, "name"),
    entities: [__dirname + "/validationcore-database-scheme/entity/*{.js,.ts}"],
    synchronize: true,
  }).then(async () => {
      logger.info("Successfully connected to database");

      logger.info("++++++++  STARTUP COMPLETE  ++++++++");

      /**
       * START API
       */
      api.start();

      /**
       * START Cache
       */
      cache.start();
    })
    .catch((error) => {
      logger.error("Error while connecting to database ", error);
    });
}

main();
